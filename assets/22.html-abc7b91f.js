import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as t,f as i,a as l}from"./app-833b555e.js";const e={},n=i('<h1 id="进程的描述与控制" tabindex="-1"><a class="header-anchor" href="#进程的描述与控制" aria-hidden="true">#</a> 进程的描述与控制</h1><h2 id="进程与程序" tabindex="-1"><a class="header-anchor" href="#进程与程序" aria-hidden="true">#</a> 进程与程序</h2><figure><img src="https://img2023.cnblogs.com/blog/2740326/202305/2740326-20230530211037559-1642989096.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>程序是永久的，进程是暂时的。</li><li>同一程序可以对应多个进程。</li><li>程序是一个静态的概念。而进程是一个动态的概念。</li><li>进程是动态的、多个进程可以含有相同的程序、多个进程可以并发运行</li><li>动态性、并发性、独立性和异步性（不可预知的速度同时向前推进）</li><li>进程实体由三部分构成：程序段、数据集、进程控制块</li><li>进程的定义：进程是执行中的程序。</li><li>进程是程序的执行过程，是系统进行资源分配和调度的一个独立单位。</li><li>进程实体 = 程序段 + 数据段 + 进程控制块（PCB）</li></ul><h2 id="进程的状态" tabindex="-1"><a class="header-anchor" href="#进程的状态" aria-hidden="true">#</a> 进程的状态</h2><ul><li><p><strong>运行态</strong></p><ul><li>当一个进程已分配到CPU，它的程序正在被CPU执行时进程所处的状态称执行状态，也称为运行状态。对于单CPU系统而言，处于执行状态的进程只可能有一个，多处理机系统中则有多个</li></ul></li><li><p>就绪态</p><ul><li>若进程已具备了运行条件，只因CPU被别的进程占用而不能被CPU执行，则称此时进程处于就绪状态。一旦把CPU分配给它，该进程就可以运行。系统中处于就绪状态的进程可能有多个，通常将它们按某种策略（优先级）排成一个队列，称为就绪队列</li></ul></li><li><p>阻塞态</p><ul><li>正在执行的进程因等待某种事件的发生而暂时不能运行便放弃CPU的状态称阻塞状态(等待状态、封锁状态)，例如，等待输入/输出、等待进程间的同步/互斥等。一旦引起等待的原消失，进程便转为就绪状态。以便在适当的时候占用CPU。系中处于等待状态的进程可能有多个，通常也将它们排成一个列。有的系统按照进程不同的等待原因，把处于等待状态的进程排成多个阻塞队列</li></ul></li><li><p>创建状态</p><ul><li>一个进程刚刚建立，但还未将它插入就绪队列时的状态(fork,CreateProcess)，通常是PCB已经创建，但还没有加载到内存中</li></ul></li><li><p>终止状态</p><ul><li>一个进程已经正常结束(exit,TerminateProcess)或异常结束，<br> OS已将它从就绪队列中移出，但尚未将它撤消时的状态</li></ul></li></ul><figure><img src="https://img2023.cnblogs.com/blog/2740326/202305/2740326-20230530211434831-679414657.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>',7),p=l("p",{class:"katex-block"},[l("span",{class:"katex-display"},[l("span",{class:"katex"},[l("span",{class:"katex-mathml"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[l("semantics",null,[l("mrow",null,[l("mtext",null,"等待就是阻塞")]),l("annotation",{encoding:"application/x-tex"}," 等待就是阻塞 ")])])]),l("span",{class:"katex-html","aria-hidden":"true"},[l("span",{class:"base"},[l("span",{class:"strut",style:{height:"0.6833em"}}),l("span",{class:"mord cjk_fallback"},"等待就是阻塞")])])])])],-1),r=l("p",{class:"katex-block"},[l("span",{class:"katex-display"},[l("span",{class:"katex"},[l("span",{class:"katex-mathml"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[l("semantics",null,[l("mrow",null,[l("mtext",null,"就绪和运行可以相互变化")]),l("annotation",{encoding:"application/x-tex"}," 就绪和运行可以相互变化 ")])])]),l("span",{class:"katex-html","aria-hidden":"true"},[l("span",{class:"base"},[l("span",{class:"strut",style:{height:"0.6833em"}}),l("span",{class:"mord cjk_fallback"},"就绪和运行可以相互变化")])])])])],-1),o=l("p",{class:"katex-block"},[l("span",{class:"katex-display"},[l("span",{class:"katex"},[l("span",{class:"katex-mathml"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[l("semantics",null,[l("mrow",null,[l("mtext",null,"等待阻塞是一个特殊的中间过程，只能从运行到就绪")]),l("annotation",{encoding:"application/x-tex"}," 等待阻塞是一个特殊的中间过程，只能从运行到就绪 ")])])]),l("span",{class:"katex-html","aria-hidden":"true"},[l("span",{class:"base"},[l("span",{class:"strut",style:{height:"0.6833em"}}),l("span",{class:"mord cjk_fallback"},"等待阻塞是一个特殊的中间过程，只能从运行到就绪")])])])])],-1),c=i('<p><strong>新建→就绪</strong></p><ul><li>许可（加载）：操作系统准备好接纳一个新进程</li><li>不许可：超过操作系统最大进程/虚存数量限制</li></ul><p><strong>就绪→运行</strong></p><ul><li>调度：调度进程选择一个新进程运行</li></ul><p><strong>运行→结束</strong></p><ul><li>释放：进程已经完成，或出错结束</li></ul><p><strong>运行→阻塞</strong></p><ul><li>等待事件：请求系统调用，如 <ul><li>等待I/O操作完成（printf、scanf）</li><li>等待新任务的到来（等待网络发数据包）</li><li>访问暂不能被使用的资源（其他进程正在使用打印机）</li><li>等待另一个进程提供输入（wait）</li></ul></li><li>申请外设</li></ul><p><strong>阻塞→就绪</strong></p><ul><li>事件发生：如I/O完成</li></ul><p><strong>运行→就绪</strong></p><ul><li>时间片到：Linux-5~800ms；Windows-20ms</li><li>抢占（preempted）：更高优先级进程已就绪</li><li>自愿释放：如周期性维护进程</li></ul><h2 id="挂起状态" tabindex="-1"><a class="header-anchor" href="#挂起状态" aria-hidden="true">#</a> 挂起状态</h2><p>使正在执行的进程暂停执行；若此时进程正处于就绪状态而未执行，则该进程暂不接受调度，我们把这种静止状态称为挂起（suspend）状态。</p><p>引入挂起状态的原因有：</p><ul><li>交换(Swapping) 操作系统需要释放内存空间，调节负荷</li><li>其他OS原因 OS挂起后台进程、工具进程，或怀疑有问题的进程</li><li>用户请求 用户希望调试进程或连接进程资源</li><li>父进程请求 挂起后代进程，以便考查修改，或协调子进程的活动</li><li>定时 周期性的记账或系统监视进程</li></ul><figure><img src="https://img2023.cnblogs.com/blog/2740326/202305/2740326-20230531100602780-741870377.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="进程控制块" tabindex="-1"><a class="header-anchor" href="#进程控制块" aria-hidden="true">#</a> 进程控制块</h2><p>进程控制块PCB(Process Control Block)记录了操作系统所需的，用于描述进程的当前情况以及管理进程的全部信息，是操作系统中最重要的记录型数据结构。</p><p>对系统而言，PCB是进程存在的惟一标志。</p><p>PCB常驻内存。操作系统将所有的PCB组织成若干个队列，存放在系统内核空间中专门开辟的区域内</p><ol><li><p><strong>进程标识符 用于唯一标识一个进程。</strong></p><ul><li>内部标识符 操作系统为每一个进程赋予一个惟一的</li><li>数字标识符（进程的序号，Process ID，PID ）</li><li>用户标识符（User ID，UID）</li><li>父进程标识符（Parent PID，PPID</li></ul></li><li><p><strong>处理机状态信息 又称上下文（Context）</strong></p><ul><li>通用寄存器（General Purpose Registers），又称用户可见寄存器，8~32个/CISC，100+个/RISC</li><li>程序计数器（Program Counter），指令计数器，存放下一条指令的地址</li><li>程序状态字（Program State Word），存放状态信息，如x86的EFLAGS</li><li>栈指针（Stack Pointer），指向栈顶</li></ul></li><li><p><strong>进程调度信息</strong></p><ul><li>进程状态：运行、就绪、等待、停止……</li><li>优先级</li><li>事件：在等待的具体事件，即阻塞原因</li><li>其它信息：已等待时间，已使用CPU时间</li></ul></li><li><p><strong>进程控制信息</strong></p><ul><li>内存相关：程序和数据的（首）地址、段表、页表</li><li>进程间通信：标记、信号量、消息队列……</li><li>资源清单：打开的文件、设备……</li><li>连接指针：指向其它PCB</li></ul></li></ol><h2 id="进程-仅概念" tabindex="-1"><a class="header-anchor" href="#进程-仅概念" aria-hidden="true">#</a> 进程(仅概念)</h2><h4 id="进程的创建" tabindex="-1"><a class="header-anchor" href="#进程的创建" aria-hidden="true">#</a> 进程的创建</h4><p>引起创建进程的事件</p><ol><li>用户登录（由系统内核创建）</li><li>作业调度（由系统内核创建）</li><li>提供服务（由系统内核创建）</li><li>应用请求（由应用进程自已创建） <ul><li><strong>子进程与父进程的关系可以是并发或递归</strong></li></ul></li></ol><p>创建进程的基本过程：创建原语Creat</p><p>（1）申请空白PCB；</p><p>（2）为新进程的程序和数据分配所需资源（内存、文件、I/O和CPU时间）</p><p>（3）初始化PCB。向该PCB中填写各种参数；</p><p>（4）New→Ready，将新进程插入到就绪队列。</p><h4 id="进程的终止" tabindex="-1"><a class="header-anchor" href="#进程的终止" aria-hidden="true">#</a> 进程的终止</h4><ol><li>正常结束 进程任务已完成，退出运行。</li><li>异常结束 如：越界错误、无可用内存、保护错、无效指令、特权指令错、超时、算术运算错、I/O故障等</li><li>外界干预 进程应外界的请求而终止运行。包括：操作员或操作系统干预、父进程请求、父进程终止。</li></ol><p>进程的终止过程是： 终止原语Halt</p><p>（1）根据进程PID检索出该进程的PCB，读出进程状态</p><p>（2）若进程处于执行状态，立即终止(Run→Terminate)，并重新进行调度<br> （3）某些系统可能将其子孙进程终止</p><p>（4）把进程拥有的资源归还给父进程或者系统内核</p><p>（5）等待其他程序来搜集信息。</p><h4 id="进程的阻塞" tabindex="-1"><a class="header-anchor" href="#进程的阻塞" aria-hidden="true">#</a> 进程的阻塞</h4><p>引起进程阻塞的事件</p><ol><li>请求系统提供服务</li><li>启动某种操作</li><li>新数据尚未到达</li><li>无新工作可做</li></ol><p>进程的阻塞(等待)过程 阻塞(等待)原语block</p><p>(1) 进程立即停止执行，把其PCB中的状态Run→Blocked；</p><p>(2) 将其PCB插入到相应的阻塞队列中去；</p><p>(3) 转调度程序进行重新调度，并进行切换</p><h4 id="进程的唤醒" tabindex="-1"><a class="header-anchor" href="#进程的唤醒" aria-hidden="true">#</a> 进程的唤醒</h4><p>引起进程唤醒的事件——被阻塞进程所期待的事件出现</p><p>进程的唤醒过程:唤醒原语wakeup</p><p>(1) 把被阻塞进程从相应事件的阻塞队列中移出;</p><p>(2) 将其PCB中的状态由Blocked→Ready;</p><p>(3) 该PCB插入到就绪队列中。</p><h2 id="进程通信" tabindex="-1"><a class="header-anchor" href="#进程通信" aria-hidden="true">#</a> 进程通信</h2><p>合作的进程通过<strong>进程间通信</strong>机制实现数据和信息的交换的锁、信号量、管程等同步机制，都可以交换进程的信息，也属于进程通信（但是传输的信息量很小，称为<strong>低级通信</strong>）</p><p><strong>高级通信机制</strong>：</p><ul><li><strong>共享内存</strong>：进程通过共享某些数据结构或内存区域通信，程序员负责处理同步问题</li><li><strong>消息传递</strong>：以格式化的消息(message)为单位，用户通过OS提供的一组通信原语(send, receive)进行通信。当前应用最广泛的IPC机制 <ul><li>直接通信 <ul><li>send (P, message) – 发送信息到进程P</li><li>receive(Q, message) – 从进程Q接受消息</li></ul></li><li>间接通信（借助中介数据结构） <ul><li>send(A, message) – 发送消息（信件）到队列A</li><li>receive(A, message) – 从队列A接受消息（信件）</li><li>信���通信：A=mailbox</li></ul></li></ul></li><li><strong>管道通信</strong>：用一个共享文件连接一个读进程和一个写进程采用先进先出（FIFO）机制的循环队列/缓冲区管道通信机制必须提供互斥、同步和确定对方是否存在的协调能力</li><li><strong>客户机-服务器系统</strong>：在网络环境的各种应用中已经成为主流<br> 主要实现方法 <ul><li>套接字（Socket）</li><li>远程过程调用（Remote Procedure Call, RPC）</li></ul></li></ul><h2 id="线程" tabindex="-1"><a class="header-anchor" href="#线程" aria-hidden="true">#</a> 线程</h2><p>进程 = 一个资源 + 多个指令执行序列（即多个线程）</p><p>只切换指令执行序列，而不切换资源保留了并发的优点，避免了进程切换代价</p><p>它是进程中的<strong>指令执行流的最小单元</strong>，是<strong>CPU调度的基本单位</strong>。</p><p>现代操作系统将进程并发调度的部分和占有资源的部分分离</p><ul><li><p>进程作为<strong>资源分配</strong>的<strong>基本单位</strong></p></li><li><p>线程作为<strong>系统调度</strong>的<strong>基本单位</strong>，是能独立运行的基本单元（线程可以并行在多核处理器上）<br><img src="https://img2023.cnblogs.com/blog/2740326/202305/2740326-20230531122841389-1628667661.png" alt="img" loading="lazy"></p></li></ul><ol><li>资源共享：默认共享地址空间、文件等</li><li>响应性：拆分应用中的多种活动 <ul><li>考虑字处理程序</li></ul></li><li>轻量级：创建、撤销、切换线程的代价比进程小</li><li>可扩展：多个线程可在多CPU系统��并行</li><li>可以并发</li><li>线程仅拥有少量自己的资源（寄存器、PC指针、栈指针等上下文信息，不能共享），多是共享的</li><li>系统开销比进程小</li><li>独立性比进程小</li><li>TCB（线程控制块）<br> 缺点：任何一个线程出问题，可能导致整个进程崩溃</li></ol><h4 id="用户级线程" tabindex="-1"><a class="header-anchor" href="#用户级线程" aria-hidden="true">#</a> 用户级线程</h4><p>用户级线程是指不需要内核支持而在用户程序中实现的线程，它的内核的切换是由<strong>用户态程序自己控制内核的切换</strong>，不需要内核的干涉。但是它不能像内核级线程一样更好的运用多核CPU。</p><p>优点：</p><p>（1） 线程的调度不需要内核直接参与，控制简单。</p><p>（2） 可以在不支持线程的操作系统中实现。</p><p>（3） 同一进程中只能同时有一个线程在运行，如果有一个线程使用了系统调用而阻塞，那么整个进程都会被挂起，可以节约更多的系统资源。</p><p>缺点：</p><p>（1） 一个用户级线程的阻塞将会引起整个进程的阻塞。</p><p>（2） 用户级线程不能利用系统的多重处理，仅有一个用户级线程可以被执行。</p><h4 id="内核级线程" tabindex="-1"><a class="header-anchor" href="#内核级线程" aria-hidden="true">#</a> 内核级线程</h4><p>切换由内核控制，当线程进行切换的时候，由用户态转化为内核态。切换完毕要从内核态返回用户态。<strong>可以很好的运用多核CPU</strong>，就像Windows电脑的四核八线程，双核四线程一样。</p><p>优点：</p><p>（1）当有多个处理机时，一个进程的多个线程可以同时执行。</p><p>（2） 由于内核级线程只有很小的数据结构和堆栈，切换速度快，当然它本身也可以用多线程技术实现，提高系统的运行速率。</p><p>缺点：</p><p>（1） 线程在用户态的运行，而线程的调度和管理在内核实现，在控制权从一个线程传送到另一个线程需要用户态到内核态再到用户态的模式切换，比较占用系统资源。（就是必须要受到内核的监控）</p><p>关联性</p><p>（1） 它们之间的差别在于性能。</p><p>（2） 内核支持线程是OS内核可感知的，而用户级线程是OS内核不可感知的。</p><p>（3） 用户级线程的创建、撤消和调度不需要OS内核的支持。</p><p>（4） 用户级线程执行系统调用指令时将导致其所属进程被中断，而内核支持线程执行系统调用指令时，只导致该线程被中断。</p><p>（5） 在只有用户级线程的系统内，CPU调度还是以进程为单位，处于运行状态的进程中的多个线程，由用户程序控制线程的轮换运行；在有内核支持线程的系统内，CPU调度则以线程为单位，由OS的线程调度程序负责线程的调度。</p><p>（6） 用户级线程的��序实体是运行在用户态下的程序，而内核支持线程的程序实体则是可以运行在任何状态下的程序。<br><img src="https://img2023.cnblogs.com/blog/2740326/202305/2740326-20230531123810325-600054624.png" alt="img" loading="lazy"></p>',85),h=[n,p,r,o,c];function g(d,u){return s(),t("div",null,h)}const P=a(e,[["render",g],["__file","22.html.vue"]]);export{P as default};
