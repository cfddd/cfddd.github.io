import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as n,b as s,d as t,f as p}from"./app-833b555e.js";const l={},u=p(`<p>C++中多线程的实现方式有多种，其中可以使用操作系统相关的线程API，如在Linux上，可以使用pthread库；也可以使用boost::thread库或者自从C++ 11开始支持的std::thread1。</p><p>pthread库是POSIX线程库，是一套线程API，它定义了一套标准的线程操作函数，可以在多种平台上使用。boost::thread库是一个跨平台的C++多线程库，它提供了一些高级的线程操作接口。std::thread是C++11标准中提供的多线程库，它提供了一些高级的线程操作接口1。</p><h1 id="互斥锁" tabindex="-1"><a class="header-anchor" href="#互斥锁" aria-hidden="true">#</a> 互斥锁</h1><p>在线程里也有这么一把锁——互斥锁（mutex），互斥锁是一种简单的加锁的方法来控制对共享资源的访问，互斥锁只有两种状态,即上锁( lock )和解锁( unlock )。</p><p>互斥锁的操作流程如下：</p><ol><li>在访问共享资源后临界区域前，对互斥锁进行加锁；</li><li>在访问完成后释放互斥锁导上的锁。在访问完成后释放互斥锁导上的锁；</li><li>对互斥锁进行加锁后，任何其他试图再次对互斥锁加锁的线程将会被阻塞，直到锁被释放。对互斥锁进行加锁后，任何其他试图再次对互斥锁加锁的线程将会被阻塞，直到锁被释放。<br> 函数接口：</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span>
<span class="token comment">// 初始化一个互斥锁。</span>
<span class="token keyword">int</span> <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span>pthread_mutex_t <span class="token operator">*</span>mutex<span class="token punctuation">,</span>
<span class="token keyword">const</span> pthread_mutexattr_t<span class="token operator">*</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 对互斥锁上锁，若互斥锁已经上锁，则调用者一直阻塞，</span>
<span class="token comment">// 直到互斥锁解锁后再上锁。</span>
<span class="token keyword">int</span> <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span>pthread_mutex_t <span class="token operator">*</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 调用该函数时，若互斥锁未加锁，则上锁，返回 0；</span>
<span class="token comment">// 若互斥锁已加锁，则函数直接返回失败，即 EBUSY。</span>
<span class="token keyword">int</span> <span class="token function">pthread_mutex_trylock</span><span class="token punctuation">(</span>pthread_mutex_t <span class="token operator">*</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 当线程试图获取一个已加锁的互斥量时，pthread_mutex_timedlock 互斥量</span>
<span class="token comment">// 原语允许绑定线程阻塞时间。即非阻塞加锁互斥量。</span>
<span class="token keyword">int</span> <span class="token function">pthread_mutex_timedlock</span><span class="token punctuation">(</span>pthread_mutex_t <span class="token operator">*</span>restrict mutex<span class="token punctuation">,</span>
<span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">timespec</span><span class="token operator">*</span>restrict abs_timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 对指定的互斥锁解锁。</span>
<span class="token keyword">int</span> <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span>pthread_mutex_t <span class="token operator">*</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 销毁指定的一个互斥锁。互斥锁在使用完毕后，</span>
<span class="token comment">// 必须要对互斥锁进行销毁，以释放资源。</span>
<span class="token keyword">int</span> <span class="token function">pthread_mutex_destroy</span><span class="token punctuation">(</span>pthread_mutex_t <span class="token operator">*</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="样例使用" tabindex="-1"><a class="header-anchor" href="#样例使用" aria-hidden="true">#</a> 样例使用</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">/*

* mutexcnt.c - 加上互斥锁（mutex lock）的多线程同步计数器
* 两个线程并发的给共享变量自增，观察是否有BUG
 */</span>

<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>

<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">thread</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span>vargp<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">/*Thread函数声明*/</span>

<span class="token comment">/*共享的全局变量*/</span>
<span class="token keyword">volatile</span> <span class="token keyword">long</span> <span class="token keyword">long</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>               <span class="token comment">/*计数器*/</span>

pthread_mutex_t count_mutex<span class="token punctuation">;</span>        <span class="token comment">/*互斥锁声明*/</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> niters<span class="token punctuation">;</span>                     <span class="token comment">/* 单线程的累加次数 */</span>
    pthread_t tid1<span class="token punctuation">,</span> tid2<span class="token punctuation">;</span>

    <span class="token comment">/* 检查输入格式 */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;输入格式: %s &lt;次数&gt;\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    niters <span class="token operator">=</span> <span class="token function">atol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">/* 互斥锁初始化 */</span>
    <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>count_mutex<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token comment">/* 创建两个线程去执行thread函数，参数为niters */</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> thread<span class="token punctuation">,</span> <span class="token operator">&amp;</span>niters<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> thread<span class="token punctuation">,</span> <span class="token operator">&amp;</span>niters<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 等待两个线程并发的执行结束 */</span>
    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 检查计数器的值是否正确 */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> niters<span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;发现BUG! cnt=%lld\\n&quot;</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
 <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;结果正确。 cnt=%lld\\n&quot;</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*线程函数*/</span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">thread</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span>vargp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> i<span class="token punctuation">,</span> niters <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">*</span><span class="token punctuation">)</span>vargp<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> niters<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>count_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//进入区</span>
        cnt<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">//临界区</span>
        <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>count_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//退出区</span>
    <span class="token punctuation">}</span>
       
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="自旋锁" tabindex="-1"><a class="header-anchor" href="#自旋锁" aria-hidden="true">#</a> 自旋锁</h1>`,10),r=n("br",null,null,-1),d={href:"https://www.cnblogs.com/cxuanBlog/p/11679883.html",target:"_blank",rel:"noopener noreferrer"},k=p(`<p>自旋锁的定义：当一个线程尝试去获取某一把锁的时候，如果这个锁此时已经被别人获取(占用)，那么此线程就无法获取到这把锁，该线程将会等待，间隔一段时间后会再次尝试获取。这种采用循环加锁 -&gt; 等待的机制被称为自旋锁(spinlock)。</p><h2 id="代码应用" tabindex="-1"><a class="header-anchor" href="#代码应用" aria-hidden="true">#</a> 代码应用</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">/* 
 * spincnt.c - 加上自旋锁（spin lock）的多线程同步计数器
 * 两个线程并发的给共享变量自增，观察是否有BUG
 */</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>

<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">thread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>vargp<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">/* Thread函数声明 */</span>

<span class="token comment">/* 共享的全局变量 */</span>
<span class="token keyword">volatile</span> <span class="token keyword">long</span> <span class="token keyword">long</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>               <span class="token comment">/* 计数器 */</span>

pthread_spinlock_t count_spinlock<span class="token punctuation">;</span>  <span class="token comment">/* 自旋锁声明 */</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> niters<span class="token punctuation">;</span>                     <span class="token comment">/* 单线程的累加次数 */</span>
    pthread_t tid1<span class="token punctuation">,</span> tid2<span class="token punctuation">;</span>
    
    <span class="token comment">/* 检查输入格式 */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;输入格式: %s &lt;次数&gt;\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    niters <span class="token operator">=</span> <span class="token function">atol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">/* 互斥锁初始化 */</span>
    <span class="token function">pthread_spin_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>count_spinlock<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token comment">/* 创建两个线程去执行thread函数，参数为niters */</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> thread<span class="token punctuation">,</span> <span class="token operator">&amp;</span>niters<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> thread<span class="token punctuation">,</span> <span class="token operator">&amp;</span>niters<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 等待两个线程并发的执行结束 */</span>
    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 检查计数器的值是否正确 */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> niters<span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;发现BUG! cnt=%lld\\n&quot;</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
 <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;结果正确。 cnt=%lld\\n&quot;</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 线程函数 */</span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">thread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>vargp<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> i<span class="token punctuation">,</span> niters <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span>vargp<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> niters<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">pthread_spin_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>count_spinlock<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//进入区</span>
        cnt<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">//临界区</span>
        <span class="token function">pthread_spin_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>count_spinlock<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//退出区</span>
    <span class="token punctuation">}</span>
        
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="读写锁" tabindex="-1"><a class="header-anchor" href="#读写锁" aria-hidden="true">#</a> 读写锁</h1><p>参考</p>`,5),v={href:"https://zhuanlan.zhihu.com/p/62363777",target:"_blank",rel:"noopener noreferrer"},m=n("br",null,null,-1),b={href:"https://zhuanlan.zhihu.com/p/135983375",target:"_blank",rel:"noopener noreferrer"},h=n("p",null,"概念：允许多个读出，但只允许一个写入的需求。",-1),_=n("p",null,"读写锁与互斥量类似，不过读写锁允许更改的并行性，也叫共享互斥锁。",-1),g=n("p",null,[s("互斥量要么是锁住状态，要么就是不加锁状态，而且一次只有一个线程可以对其加锁。"),n("br"),s(" 读写锁可以有3种状态：读模式下加锁状态、写模式加锁状态、不加锁状态。"),n("br"),n("img",{src:"https://img2023.cnblogs.com/blog/2740326/202305/2740326-20230524151713374-484117895.png",alt:"img",loading:"lazy"})],-1),f=n("h1",{id:"条件变量",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#条件变量","aria-hidden":"true"},"#"),s(" 条件变量")],-1),y={href:"https://zhuanlan.zhihu.com/p/136431212",target:"_blank",rel:"noopener noreferrer"},w=p(`<p>与互斥锁不同，条件变量是用来等待而不是用来上锁的。条件变量用来自动阻塞一个线程，直 到某特殊情况发生为止。通常条件变量和互斥锁同时使用。</p><p>条件变量使我们可以睡眠等待某种条件出现。条件变量是利用线程间共享的全局变量进行同步 的一种机制，主要包括两个动作：</p><blockquote><p>一个线程等待&quot;条件变量的条件成立&quot;而挂起</p><p>另一个线程使 “条件成立”（给出条件成立信号）</p></blockquote><ul><li>好像就是生产者和消费者</li></ul><p><strong>条件变量使用步骤：</strong></p><ol><li><p>初始化：init()或者pthread_cond_tcond=PTHREAD_COND_INITIALIER；属性置为NULL；</p></li><li><p>等待条件成立：pthread_wait，pthread_timewait.wait()释放锁,并阻塞等待条件变量为真 timewait()设置等待时间,仍未signal,返回ETIMEOUT(加锁保证只有一个线程wait)；</p></li><li><p>激活条件变量：pthread_cond_signal,pthread_cond_broadcast(激活所有等待线程)</p></li><li><p>清除条件变量：destroy;无线程等待,否则返回EBUSY清除条件变量:destroy;无线程等待,否则返回EBUSY</p></li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token comment">// 初始化条件变量</span>
<span class="token keyword">int</span> <span class="token function">pthread_cond_init</span><span class="token punctuation">(</span>pthread_cond_t <span class="token operator">*</span>cond<span class="token punctuation">,</span>pthread_condattr_t<span class="token operator">*</span>cond_attr<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 阻塞等待</span>
<span class="token keyword">int</span> <span class="token function">pthread_cond_wait</span><span class="token punctuation">(</span>pthread_cond_t <span class="token operator">*</span>cond<span class="token punctuation">,</span>pthread_mutex_t<span class="token operator">*</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 超时等待</span>
<span class="token keyword">int</span> <span class="token function">pthread_cond_timewait</span><span class="token punctuation">(</span>pthread_cond_t <span class="token operator">*</span>cond<span class="token punctuation">,</span>pthread_mutex<span class="token operator">*</span>mutex<span class="token punctuation">,</span><span class="token keyword">const</span> timespec <span class="token operator">*</span>abstime<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 解除所有线程的阻塞</span>
<span class="token keyword">int</span> <span class="token function">pthread_cond_destroy</span><span class="token punctuation">(</span>pthread_cond_t <span class="token operator">*</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 至少唤醒一个等待该条件的线程</span>
<span class="token keyword">int</span> <span class="token function">pthread_cond_signal</span><span class="token punctuation">(</span>pthread_cond_t <span class="token operator">*</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 唤醒等待该条件的所有线程</span>
<span class="token keyword">int</span> <span class="token function">pthread_cond_broadcast</span><span class="token punctuation">(</span>pthread_cond_t <span class="token operator">*</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考代码" tabindex="-1"><a class="header-anchor" href="#参考代码" aria-hidden="true">#</a> 参考代码</h2><p>打印10次ABC</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>thread_id<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> id <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>thread_id<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//互斥锁</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>id <span class="token operator">!=</span> current_thread<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使当前线程进入等待状态，等待条件变量满足特定条件。</span>
        <span class="token punctuation">}</span>

        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;current_thread%c tid = %lld\\n&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span><span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        current_thread <span class="token operator">=</span> <span class="token punctuation">(</span>current_thread <span class="token operator">-</span> <span class="token char">&#39;A&#39;</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span>

        <span class="token function">pthread_cond_broadcast</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 唤醒所有等待该条件变量的线程。</span>
        <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="信号量" tabindex="-1"><a class="header-anchor" href="#信号量" aria-hidden="true">#</a> 信号量</h1>`,11),x={href:"https://zhuanlan.zhihu.com/p/138497069",target:"_blank",rel:"noopener noreferrer"},L=n("p",null,"编程时可根据操作信号量值的结果判断是否对公共资源具有访问的权限，当信号量值大于 0 时，则可以访问，否则将阻塞。",-1),U=n("p",null,"PV 原语是对信号量的操作，一次 P 操作使信号量减１，一次 V 操作使信号量加１。",-1),N=n("p",null,"PV成对出现",-1);function q(z,B){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[s("参考"),r,n("a",d,[s("https://www.cnblogs.com/cxuanBlog/p/11679883.html"),t(a)])]),k,n("p",null,[n("a",v,[s("https://zhuanlan.zhihu.com/p/62363777"),t(a)]),m,n("a",b,[s("https://zhuanlan.zhihu.com/p/135983375"),t(a)])]),h,_,g,f,n("ul",null,[n("li",null,[n("a",y,[s("https://zhuanlan.zhihu.com/p/136431212"),t(a)])])]),w,n("ul",null,[n("li",null,[n("a",x,[s("https://zhuanlan.zhihu.com/p/138497069"),t(a)])])]),L,U,N])}const A=e(l,[["render",q],["__file","1.html.vue"]]);export{A as default};
