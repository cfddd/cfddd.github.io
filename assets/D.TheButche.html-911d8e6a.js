import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c as e,a as n,b as s,d as c,f as l}from"./app-85eb831d.js";const i={},u=n("h2",{id:"题目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#题目","aria-hidden":"true"},"#"),s(" 题目")],-1),k={href:"https://codeforces.com/contest/1820/problem/D",target:"_blank",rel:"noopener noreferrer"},r=l(`<h2 id="题意" tabindex="-1"><a class="header-anchor" href="#题意" aria-hidden="true">#</a> 题意</h2><ul><li>n个数对a，b，表示矩形</li><li>这n个矩形通过原先一个大矩形分割而来</li><li>每次分割只在上一次分割的矩阵其中之一</li><li>现在原先的矩阵大小未知，问有原先的矩阵（在切割过程中不会旋转矩阵）多少种，并输出</li><li>保证至少存在一种方法</li></ul><h2 id="思路" tabindex="-1"><a class="header-anchor" href="#思路" aria-hidden="true">#</a> 思路</h2><ul><li>从题意可得，在所有子矩阵中，必然有一条边和原先矩阵完全重合且相等，这条边最大</li><li>所以可以通过这一条最大的边，来判断是否能把矩阵拼好</li><li>同时，我们还能得出原先矩阵的面积，通过这一条最长边，可以算出另一条对应的长度</li><li>通过一个分解函数，来逐步分割检查能不能拼成，具体思路见代码</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>
    map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> multiset<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
    set<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> maxa <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> maxb <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> y<span class="token punctuation">;</span>
        a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        b<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sum <span class="token operator">+=</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span>
        maxa <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxa<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        maxb <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxb<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">auto</span> check <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> X<span class="token punctuation">,</span> <span class="token keyword">int</span> Y<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> multiset<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> xx<span class="token punctuation">,</span> map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> multiset<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> yy<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> start <span class="token operator">=</span> n<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>X <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> Y <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            
            <span class="token keyword">int</span> temp <span class="token operator">=</span> start<span class="token punctuation">;</span>
            <span class="token comment">//X</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it<span class="token operator">:</span>xx<span class="token punctuation">[</span>X<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    Y <span class="token operator">-=</span> it<span class="token punctuation">;</span>
                    <span class="token comment">// debug2(Y, it);</span>
                    <span class="token comment">// yy.erase(it);//删除所有yy中为it的元素，应该是只删除一个</span>
                    yy<span class="token punctuation">[</span>it<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>yy<span class="token punctuation">[</span>it<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    temp<span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                xx<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">;</span>
                id <span class="token operator">^=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>    <span class="token comment">//Y</span>
            <span class="token punctuation">{</span>
                <span class="token comment">// debug3(X, Y,yy.count(Y));</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">:</span> yy<span class="token punctuation">[</span>Y<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    X <span class="token operator">-=</span> it<span class="token punctuation">;</span>
                    <span class="token comment">// debug2(X, it);</span>
                    xx<span class="token punctuation">[</span>it<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>xx<span class="token punctuation">[</span>it<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    temp<span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                yy<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span>
                id <span class="token operator">^=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            
            <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span> start<span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            start <span class="token operator">=</span> temp<span class="token punctuation">;</span>
            
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> X <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> Y <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sum <span class="token operator">%</span> maxa<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">check</span><span class="token punctuation">(</span>maxa<span class="token punctuation">,</span> sum <span class="token operator">/</span> maxa<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
        ans<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>maxa<span class="token punctuation">,</span> sum <span class="token operator">/</span> maxa<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sum <span class="token operator">%</span> maxb<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">check</span><span class="token punctuation">(</span>sum <span class="token operator">/</span> maxb<span class="token punctuation">,</span> maxb<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
        ans<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>sum <span class="token operator">/</span> maxb<span class="token punctuation">,</span> maxb<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> x<span class="token operator">:</span>ans<span class="token punctuation">)</span>
        cout <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">.</span>fi <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">.</span>se <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function d(m,v){const a=p("ExternalLinkIcon");return o(),e("div",null,[u,n("p",null,[n("a",k,[s("Codeforces Round 866 (Div. 2)D. The Butcher"),c(a)])]),r])}const x=t(i,[["render",d],["__file","D.TheButche.html.vue"]]);export{x as default};
